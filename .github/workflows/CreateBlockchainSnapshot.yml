name: 'Create Blockchain Snapshot'

on:
  workflow_dispatch:
    inputs:
      networkName:
        description: 'Enter the network name'
        required: true
        type: string
      clusterAlias:
        description: 'Enter the name of your cluster'
        required: true
        type: string
      snapshotName:
        description: "Enter the snapshot name"
        required: true
        type: string
env:
  CICD_DEPLOYMENT_TOKEN: ${{ secrets.CICD_DEPLOYMENT_TOKEN }}

  AWS_IAM_ROLE_ARN_TO_ASSUME: ${{ vars.AWS_IAM_ROLE_ARN_TO_ASSUME }}

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  createSnapshot:
    name: 'Create Blockchain Snapshot'
    runs-on: ubuntu-22.04 #version: 20230911.1.0
    environment: production
    defaults:
      run:
        shell: bash
    steps:
      - name: Set env variables
        run: |
          echo "SNAPSHOT_FILE_PATH=./snapshot.yaml" >> $GITHUB_ENV

      - name: Set env variables
        run: |
          echo "REGION_FILE_PATH=./private/${{ github.event.inputs.networkName }}/${{ github.event.inputs.clusterAlias }}/region" >> $GITHUB_ENV
      # Checkout the repository to the GitHub Actions runner
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.CICD_DEPLOYMENT_TOKEN }}

      - name: Read region
        run: |
          echo "REGION=$(cat $REGION_FILE_PATH)" >> $GITHUB_ENV

      - name: 'Configure AWS Credentials Action For GitHub Actions'
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_IAM_ROLE_ARN_TO_ASSUME }}
          aws-region: ${{ env.REGION }}

      - name: Connect to cluster
        run: |
            aws eks --region ${{env.REGION}} update-kubeconfig --name ${{ github.event.inputs.networkName }}-${{ github.event.inputs.clusterAlias }}
            
      - name: Install kubectl 
        uses: azure/setup-kubectl@v3
        
      - name: Run kubectl
        run: |
          kubectl get pods
            
      - name: Generate snapshot manifest
        run: |
          echo $SNAPSHOT_FILE_PATH
          echo "apiVersion: snapshot.storage.k8s.io/v1" >>  $SNAPSHOT_FILE_PATH
          echo "kind: VolumeSnapshot" >>  $SNAPSHOT_FILE_PATH
          echo "metadata:" >>  $SNAPSHOT_FILE_PATH
          echo "name: ${{github.event.inputs.snapshotName}}" >>  $SNAPSHOT_FILE_PATH
          sed -i 's/\(name:\)/\  \1/' $SNAPSHOT_FILE_PATH
          echo "spec:" >>  $SNAPSHOT_FILE_PATH          
          echo "volumeSnapshotClassName: csi-aws-retain" >>  $SNAPSHOT_FILE_PATH          
          sed -i 's/\(volumeSnapshotClassName:\)/\  \1/' $SNAPSHOT_FILE_PATH
          echo "source:" >>  $SNAPSHOT_FILE_PATH          
          sed -i 's/\(source:\)/\  \1/' $SNAPSHOT_FILE_PATH
          echo "persistentVolumeClaimName: quorum-data" >>  $SNAPSHOT_FILE_PATH          
          sed -i 's/\(persistentVolumeClaimName\)/\  \1/' $SNAPSHOT_FILE_PATH
          sed -i 's/\(persistentVolumeClaimName\)/\  \1/' $SNAPSHOT_FILE_PATH

      - name: List content repo
        run: |
          ls -la 

      - name: Create Blockchain Snapshot
        run: |
          kubectl apply -f $SNAPSHOT_FILE_PATH

      - name: Wait for volumesnapshot is ready to use
        run: |
          READYTOUSE="false"
          
          while [ "${READYTOUSE}" == "false" ]
          do
            kubectl get volumesnapshots | grep "${{github.event.inputs.snapshotName}}"

            READYTOUSE=$(kubectl get volumesnapshots | grep "${{github.event.inputs.snapshotName}}" | awk '{print $2}')

            sleep 5  
          done

      - name: List snapshots
        run: |
          kubectl get volumeSnapshot

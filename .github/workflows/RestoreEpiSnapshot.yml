name: 'Restore Snapshot'

on:
  workflow_dispatch:
    inputs:
      networkName:
        description: 'Enter the network name'
        required: true
        type: string
      clusterAlias:
        description: 'Enter the name of your cluster'
        required: true
        type: string
      snapshotName:
        description: "Enter the snapshot name"
        required: true
        type: string

env:
  CICD_DEPLOYMENT_TOKEN: ${{ secrets.CICD_DEPLOYMENT_TOKEN }}

  AWS_IAM_ROLE_ARN_TO_ASSUME: ${{ vars.AWS_IAM_ROLE_ARN_TO_ASSUME }}

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  restoreSnapshot:
    name: 'Restore Snapshot'
    runs-on: ubuntu-22.04 #version: 20230911.1.0
    environment: production
    defaults:
      run:
        shell: bash
    steps:
      - name: Set env variables
        run: |
          echo "PVC_FILE_PATH=./pvc.yaml" >> $GITHUB_ENV
      - name: Set env variables
        run: |
          echo "REGION_FILE_PATH=./private/${{ github.event.inputs.networkName }}/${{ github.event.inputs.clusterAlias }}/region" >> $GITHUB_ENV
      # Checkout the repository to the GitHub Actions runner
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.CICD_DEPLOYMENT_TOKEN }}

      - name: Read region
        run: |
          echo "REGION=$(cat $REGION_FILE_PATH)" >> $GITHUB_ENV

      - name: 'Configure AWS Credentials Action For GitHub Actions'
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_IAM_ROLE_ARN_TO_ASSUME }}
          aws-region: ${{ env.REGION }}

      - name: Connect to cluster
        run: |
            aws eks --region ${{env.REGION}} update-kubeconfig --name ${{ github.event.inputs.networkName }}-${{ github.event.inputs.clusterAlias }}
            
      - name: Install kubectl 
        uses: azure/setup-kubectl@v3

      - name: Check if volumesnapshot is ready to use
        run: |
          READYTOUSE=$(kubectl get volumesnapshots | grep "${{github.event.inputs.snapshotName}}" | awk '{print $2}')

          if [[ "${READYTOUSE}" != "true" ]]
          then
            echo "Volume snapshot ${{github.event.inputs.snapshotName}} is NOT ready to use."

            exit 1
          fi
        
      - name: Delete existing epi pvc
        run: |
          kubectl scale deployment epi --replicas=0

          kubectl delete pvc epi --ignore-not-found=true

      - name: Generate snapshot manifest
        run: |
          echo $PVC_FILE_PATH
          echo "apiVersion: v1" >> $PVC_FILE_PATH
          echo "kind: PersistentVolumeClaim" >>  $PVC_FILE_PATH
          echo "metadata:" >>  $PVC_FILE_PATH
          echo "name: epi" >> $PVC_FILE_PATH
          sed -i 's/\(name:\)/\  \1/' $PVC_FILE_PATH
          echo "spec:" >>  $PVC_FILE_PATH          
          echo "accessModes:" >> $PVC_FILE_PATH          
          sed -i 's/\(accessModes:\)/\  \1/' $PVC_FILE_PATH
          echo "- ReadWriteOnce" >>  $PVC_FILE_PATH          
          sed -i 's/\(- ReadWriteOnce\)/\  \1/' $PVC_FILE_PATH
          echo "resources:" >> $PVC_FILE_PATH          
          sed -i 's/\(resources:\)/\  \1/' $PVC_FILE_PATH
          echo "requests:" >> $PVC_FILE_PATH
          sed -i 's/\(requests\)/\  \1/' $PVC_FILE_PATH
          sed -i 's/\(requests\)/\  \1/' $PVC_FILE_PATH
          echo "storage: $(kubectl get volumesnapshots | grep ${{github.event.inputs.snapshotName}} | awk '{print $4}')" >> $PVC_FILE_PATH
          sed -i 's/\(storage\)/\  \1/' $PVC_FILE_PATH
          sed -i 's/\(storage\)/\  \1/' $PVC_FILE_PATH
          sed -i 's/\(storage\)/\  \1/' $PVC_FILE_PATH
          echo "dataSource:" >> $PVC_FILE_PATH
          sed -i 's/\(dataSource\)/\  \1/' $PVC_FILE_PATH
          echo "name: ${{github.event.inputs.snapshotName}}" >> $PVC_FILE_PATH
          sed -i 's/\(name\)/\  \1/' $PVC_FILE_PATH
          sed -i 's/\(name\)/\  \1/' $PVC_FILE_PATH
          echo "kind: VolumeSnapshot" >> $PVC_FILE_PATH
          sed -i 's/\(kind: VolumeSnapshot\)/\  \1/' $PVC_FILE_PATH
          sed -i 's/\(kind: VolumeSnapshot\)/\  \1/' $PVC_FILE_PATH
          echo "apiGroup: snapshot.storage.k8s.io" >> $PVC_FILE_PATH
          sed -i 's/\(apiGroup\)/\  \1/' $PVC_FILE_PATH
          sed -i 's/\(apiGroup\)/\  \1/' $PVC_FILE_PATH
      - name: List content repo
        run: |
          cat ./$PVC_FILE_PATH
          ls -la 

      - name: Restore Snapshot
        run: |
          kubectl apply -f $PVC_FILE_PATH

      - name: Restart epi
        run: |
          kubectl scale deployment epi --replicas=1          

      - name: List pvcs
        run: |
          kubectl describe deployment

          echo "Waiting for pod epi to be ready ..."
          kubectl wait --timeout=300s --for=condition=ready pod -l app.kubernetes.io/name=epi
          kubectl get pvc

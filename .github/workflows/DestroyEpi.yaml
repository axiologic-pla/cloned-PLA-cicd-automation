name: 'Destroy ePI'

on:
  workflow_dispatch:
    inputs:
      networkName:
        description: 'Enter the network name'
        required: true
        type: string
      clusterName:
        description: 'Enter the name of your cluster'
        required: true
        type: string
      dnsName:
        description: 'Enter the EPI DNS name'
        required: true
        type: string
      domain:
        description: 'Enter the domain'
        required: true
        type: string
      subDomain:
        description: 'Enter the sub domain'
        required: true
        type: string
      vaultDomain:
        description: 'Enter the vault domain'
        required: true
        type: string
      epiRunnerVersion:
        description: 'Enter EPI runner version'
        required: true
        type: string
      epiRunnerVersionSHA:
        description: 'Enter EPI runner version SHA'
        required: true
        type: string
      epiBuilderVersion:
        description: 'Enter EPI builder version'
        required: true
        type: string
      epiBuilderVersionSHA:
        description: 'Enter EPI builder version SHA'
        required: true
        type: string
  workflow_call:
    inputs:
      networkName:
        description: 'Enter the network name'
        required: true
        type: string
      clusterName:
        description: 'Enter the name of your cluster'
        required: true
        type: string

env:
  CICD_DEPLOYMENT_NAME: "6-epi-app-deployment-pla"

  GIT_USERNAME: ${{ vars.GIT_USERNAME }}
  GIT_EMAIL: ${{ vars.GIT_EMAIL }}

  CICD_DEPLOYMENT_TOKEN: ${{ secrets.CICD_DEPLOYMENT_TOKEN }}

  CICD_AUTOMATION_REPO: ${{ vars.CICD_AUTOMATION_REPO }}
  CICD_AUTOMATION_BRANCH: ${{ vars.CICD_AUTOMATION_BRANCH }}

  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_IAM_ROLE_ARN_TO_ASSUME: ${{ vars.AWS_IAM_ROLE_ARN_TO_ASSUME }}

  NETWORK_NAME: ${{ inputs.networkName }}
  CLUSTER_NAME: ${{ inputs.clusterName }}

  HELM_PL_PLUGIN_REPOSITORY_URL: ${{ vars.HELM_PL_PLUGIN_REPOSITORY_URL }}

  DNS_NAME: ${{ github.event.inputs.dnsName }}
  DOMAIN: ${{ github.event.inputs.domain }}
  SUB_DOMAIN: ${{ github.event.inputs.subDomain }}
  VAULT_DOMAIN: ${{ github.event.inputs.vaultDomain }}

  ETHADAPTER_HELM_CHART_VERSION: ${{ vars.ETHADAPTER_HELM_CHART_VERSION }}

  ETHADAPTER_IMAGE_REPOSITORY: ${{ vars.ETHADAPTER_IMAGE_REPOSITORY }}
  ETHADAPTER_IMAGE_VERSION: ${{ vars.ETHADAPTER_IMAGE_VERSION }}
  ETHADAPTER_IMAGE_VERSION_SHA: ${{ vars.ETHADAPTER_IMAGE_VERSION_SHA }}

  EPI_HELM_CHART_VERSION: ${{ vars.EPI_HELM_CHART_VERSION }}

  EPI_RUNNER_IMAGE_REPOSITORY: ${{ vars.EPI_RUNNER_IMAGE_REPOSITORY }}
  EPI_RUNNER_IMAGE_VERSION: ${{ github.event.inputs.epiRunnerVersion }}
  EPI_RUNNER_IMAGE_VERSION_SHA: ${{ github.event.inputs.epiRunnerVersionSHA }}

  EPI_BUILDER_IMAGE_REPOSITORY: ${{ vars.EPI_BUILDER_IMAGE_REPOSITORY }}
  EPI_BUILDER_IMAGE_VERSION: ${{ github.event.inputs.epiBuilderVersion }}
  EPI_BUILDER_IMAGE_VERSION_SHA: ${{ github.event.inputs.epiBuilderVersionSHA }}

  BUILD_SECRET_KEY: ${{ secrets.BUILD_SECRET_KEY }}
  SSO_SECRETS_ENCRYPTION_KEY: ${{ secrets.SSO_SECRETS_ENCRYPTION_KEY }}
  OAUTH_JWKS_ENDPOINT: ${{ secrets.OAUTH_JWKS_ENDPOINT }}
  ISSUER: ${{ secrets.ISSUER }}
  AUTHORIZATION_ENDPOINT: ${{ secrets.AUTHORIZATION_ENDPOINT }}
  TOKEN_ENDPOINT: ${{ secrets.TOKEN_ENDPOINT }}

  LOGOUT_URL: ${{ secrets.LOGOUT_URL }}

  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  DestroyEpi:
    name: 'Destroy ePI'
    runs-on: ubuntu-22.04 # version: 20230911.1.0
    environment: production

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v3.3.0
        with:
          token: ${{ env.CICD_DEPLOYMENT_TOKEN }}

      - uses: actions/checkout@v3.3.0
        with:
          token: ${{ env.CICD_DEPLOYMENT_TOKEN }}
          repository: ${{ env.CICD_AUTOMATION_REPO }}
          path: "./automation"
          ref: ${{ env.CICD_AUTOMATION_BRANCH }}
      
      - name: 'Set env variables'
        run: |
          TFSTATE_PATH="./private/${{ env.NETWORK_NAME }}/${{ env.CLUSTER_NAME }}/terraform/${{ env.CICD_DEPLOYMENT_NAME }}/terraform.tfstate"
          EPI_INFO_PATH="./private/${{ env.NETWORK_NAME }}/${{ env.CLUSTER_NAME }}/private/epi.info.yaml"
          
          echo "AWS_REGION=$(cat ./private/${{ env.NETWORK_NAME }}/${{ env.CLUSTER_NAME }}/region)" >> $GITHUB_ENV
          
          echo "DNS_NAME=$(jq -r '.resources[] | select(.type=="aws_acm_certificate" and .name=="epi") | .instances[0].attributes.domain_name' "$TFSTATE_PATH")" >> $GITHUB_ENV
          echo "DOMAIN=$(yq e '.config.domain' $EPI_INFO_PATH)" >> $GITHUB_ENV
          echo "SUB_DOMAIN=$(yq e '.config.subDomain' $EPI_INFO_PATH)" >> $GITHUB_ENV
          echo "VAULT_DOMAIN=$(yq e '.config.vaultDomain' $EPI_INFO_PATH)" >> $GITHUB_ENV
               
          echo "EPI_RUNNER_VERSION=$(yq e '.runner.image.tag' $EPI_INFO_PATH)" >> $GITHUB_ENV
          echo "EPI_RUNNER_VERSION_SHA=$(yq e '.runner.image.sha' $EPI_INFO_PATH)" >> $GITHUB_ENV
          echo "EPI_BUILDER_VERSION=$(yq e '.builder.image.tag' $EPI_INFO_PATH)" >> $GITHUB_ENV
          echo "EPI_BUILDER_VERSION_SHA=$(yq e '.builder.image.sha' $EPI_INFO_PATH)" >> $GITHUB_ENV

      - name: 'Configure AWS Credentials Action For GitHub Actions'
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_IAM_ROLE_ARN_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 'Helm Install'
        uses: azure/setup-helm@v3.5
        with:
          version: v3.9.0
          token: ${{ env.CICD_DEPLOYMENT_TOKEN }}

      - name: Helm Install pharmaledger plugins
        run: |
          helm plugin install ${{ env.HELM_PL_PLUGIN_REPOSITORY_URL }}

      - name: 'Terraform Install'
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: 1.5.7
          
      - name: 'Terraform Destroy'
        run: |
          cd ./automation/deployments/terraform/${{ env.CICD_DEPLOYMENT_NAME }}
         
          /bin/bash terraform.sh destroy -lock=false \
            "${{ env.AWS_ACCOUNT_ID }}" \
            "${{ env.NETWORK_NAME }}" \
            "${{ env.CLUSTER_NAME }}" \
            "${{ env.CICD_DEPLOYMENT_TOKEN }}" \
            "${{ env.GIT_USERNAME }}" \
            "${{ env.GIT_EMAIL }}" \
            "${{ env.DNS_NAME }}" \
            "${{ env.DOMAIN }}" \
            "${{ env.SUB_DOMAIN }}" \
            "${{ env.VAULT_DOMAIN }}" \
            "${{ env.ETHADAPTER_HELM_CHART_VERSION }}" \
            "${{ env.ETHADAPTER_IMAGE_REPOSITORY }}" \
            "${{ env.ETHADAPTER_IMAGE_VERSION }}" \
            "${{ env.ETHADAPTER_IMAGE_VERSION_SHA }}" \
            "${{ env.EPI_HELM_CHART_VERSION }}" \
            "${{ env.EPI_RUNNER_IMAGE_REPOSITORY }}" \
            "${{ env.EPI_RUNNER_IMAGE_VERSION }}" \
            "${{ env.EPI_RUNNER_IMAGE_VERSION_SHA }}" \
            "${{ env.EPI_BUILDER_IMAGE_REPOSITORY }}" \
            "${{ env.EPI_BUILDER_IMAGE_VERSION }}" \
            "${{ env.EPI_BUILDER_IMAGE_VERSION_SHA }}" \
            "${{ env.BUILD_SECRET_KEY }}" \
            "${{ env.SSO_SECRETS_ENCRYPTION_KEY }}" \
            "${{ env.OAUTH_JWKS_ENDPOINT }}" \
            "${{ env.ISSUER }}" \
            "${{ env.AUTHORIZATION_ENDPOINT }}" \
            "${{ env.TOKEN_ENDPOINT }}" \
            "${{ env.LOGOUT_URL }}" \
            "${{ env.CLIENT_ID }}" \
            "${{ env.CLIENT_SECRET }}" \
            "${{ github.repository_owner }}" \
            "${{ env.HELM_CHARTS_BRANCH }}"

      - name: 'Git Commit & Push'
        run: |
          git add "./private/${{ env.NETWORK_NAME }}/${{ env.CLUSTER_NAME }}"
          git commit -m "Managed by Terraform - ./private/${{ env.NETWORK_NAME }}/${{ env.CLUSTER_NAME }}"

          git pull && git push

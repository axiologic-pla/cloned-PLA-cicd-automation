name: 'Destroy Infrastructure'

on:
  workflow_dispatch:
    inputs:
      networkName:
        description: 'Enter the network name'
        required: true
        type: string
      clusterName:
        description: 'Enter the name of your cluster'
        required: true
        type: string
      region:
        description: 'Enter the region of your cluster'
        required: true
        type: string
  workflow_call:
    inputs:
      networkName:
        description: 'Enter the network name'
        required: true
        type: string
      clusterName:
        description: 'Enter the name of your cluster'
        required: true
        type: string

env:
  CICD_DEPLOYMENT_NAME: "1-aws-eks-infrastructure-pla"

  GIT_USERNAME: ${{ vars.GIT_USERNAME }}
  GIT_EMAIL: ${{ vars.GIT_EMAIL }}

  CICD_DEPLOYMENT_TOKEN: ${{ secrets.CICD_DEPLOYMENT_TOKEN }}
  CICD_AUTOMATION_REPO: ${{ vars.CICD_AUTOMATION_REPO }}
  CICD_AUTOMATION_BRANCH: ${{ vars.CICD_AUTOMATION_BRANCH }}

  AWS_REGION: ${{ github.event.inputs.region }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_IAM_ROLE_ARN_TO_ASSUME: ${{ vars.AWS_IAM_ROLE_ARN_TO_ASSUME }}
  AWS_EKS_AUTH_ROLES: ${{ vars.AWS_EKS_AUTH_ROLES }}
  AWS_EKS_AUTH_USERS: ${{ vars.AWS_EKS_AUTH_USERS }}
  AWS_EKS_AUTH_ACCOUNTS: ${{ vars.AWS_EKS_AUTH_ACCOUNTS }}

  NETWORK_NAME: ${{ inputs.networkName }}
  CLUSTER_NAME: ${{ inputs.clusterName }}

  CLUSTER_VERSION: ${{ vars.AWS_EKS_CLUSTER_VERSION }}

  INSTANCE_TYPE: ${{ inputs.instanceType }}
  NODE_GROUP_DESIRED_SIZE: ${{ vars.NODE_GROUP_DESIRED_SIZE }}

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  DestroyInfrastructure:
    name: 'Destroy Infrastructure'
    runs-on: ubuntu-22.04 # version: 20230911.1.0
    environment: production

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v3.3.0
        with:
          token: ${{ env.CICD_DEPLOYMENT_TOKEN }}

      - uses: actions/checkout@v3.3.0
        with:
          token: ${{ env.CICD_DEPLOYMENT_TOKEN }}
          repository: ${{ env.CICD_AUTOMATION_REPO }}
          path: "./automation"
          ref: ${{ env.CICD_AUTOMATION_BRANCH }}

      - name: 'Set env AWS_REGION'
        run: echo "AWS_REGION=$(cat ./private/${{ env.NETWORK_NAME }}/${{ env.CLUSTER_NAME }}/region)" >> $GITHUB_ENV

      - name: 'Configure AWS Credentials Action For GitHub Actions'
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_IAM_ROLE_ARN_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 'Terraform Install'
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: 1.5.7
          
      - name: 'Terraform Destroy'
        run: |
          mv ./automation/deployments/terraform/${{ env.CICD_DEPLOYMENT_NAME }} .
         
          rm -rf ./automation

          cd ./${{ env.CICD_DEPLOYMENT_NAME }}
         
          /bin/bash terraform.sh destroy \
            "${{ env.AWS_REGION }}" \
            "${{ env.AWS_ACCOUNT_ID }}" \
            "${{ env.NETWORK_NAME }}" \
            "${{ env.CLUSTER_NAME }}" \
            "${{ env.CLUSTER_VERSION }}" \
            "${{ env.CICD_DEPLOYMENT_TOKEN }}" \
            "${{ env.GIT_USERNAME }}" \
            "${{ env.GIT_EMAIL }}" \
            "${{ env.AWS_EKS_AUTH_USERS }}" \
            "${{ env.AWS_EKS_AUTH_ROLES }}" \
            "${{ env.AWS_EKS_AUTH_ACCOUNTS }}" \
            "${{ env.INSTANCE_TYPE }}" \
            "${{ env.NODE_GROUP_DESIRED_SIZE }}"

      - name: 'Git Commit & Push'
        run: |
          git add "./private/${{ env.NETWORK_NAME }}/${{ env.CLUSTER_NAME }}"
          git commit -m "Managed by Terraform - ./private/${{ env.NETWORK_NAME }}/${{ env.CLUSTER_NAME }}"

          git pull && git push
